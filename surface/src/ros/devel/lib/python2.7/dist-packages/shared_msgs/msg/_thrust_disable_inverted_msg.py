# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from shared_msgs/thrust_disable_inverted_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class thrust_disable_inverted_msg(genpy.Message):
  _md5sum = "8b3d2e54482b6a65fb91c54d0d200315"
  _type = "shared_msgs/thrust_disable_inverted_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool[8] disable_thrusters
int8[8] inverted"""
  __slots__ = ['disable_thrusters','inverted']
  _slot_types = ['bool[8]','int8[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       disable_thrusters,inverted

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(thrust_disable_inverted_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.disable_thrusters is None:
        self.disable_thrusters = [False] * 8
      if self.inverted is None:
        self.inverted = [0] * 8
    else:
      self.disable_thrusters = [False] * 8
      self.inverted = [0] * 8

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_8B().pack(*self.disable_thrusters))
      buff.write(_get_struct_8b().pack(*self.inverted))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      self.disable_thrusters = _get_struct_8B().unpack(str[start:end])
      self.disable_thrusters = map(bool, self.disable_thrusters)
      start = end
      end += 8
      self.inverted = _get_struct_8b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.disable_thrusters.tostring())
      buff.write(self.inverted.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      self.disable_thrusters = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=8)
      self.disable_thrusters = map(bool, self.disable_thrusters)
      start = end
      end += 8
      self.inverted = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_8b = None
def _get_struct_8b():
    global _struct_8b
    if _struct_8b is None:
        _struct_8b = struct.Struct("<8b")
    return _struct_8b
