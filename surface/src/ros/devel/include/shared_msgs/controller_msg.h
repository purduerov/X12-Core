// Generated by gencpp from file shared_msgs/controller_msg.msg
// DO NOT EDIT!


#ifndef SHARED_MSGS_MESSAGE_CONTROLLER_MSG_H
#define SHARED_MSGS_MESSAGE_CONTROLLER_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shared_msgs
{
template <class ContainerAllocator>
struct controller_msg_
{
  typedef controller_msg_<ContainerAllocator> Type;

  controller_msg_()
    : RX_axis(0.0)
    , RY_axis(0.0)
    , LX_axis(0.0)
    , LY_axis(0.0)
    , a(0)
    , b(0)
    , x(0)
    , y(0)
    , DPadX(0)
    , DPadY(0)
    , RB(0)
    , LB(0)
    , Rtrigger(0.0)
    , Ltrigger(0.0)  {
    }
  controller_msg_(const ContainerAllocator& _alloc)
    : RX_axis(0.0)
    , RY_axis(0.0)
    , LX_axis(0.0)
    , LY_axis(0.0)
    , a(0)
    , b(0)
    , x(0)
    , y(0)
    , DPadX(0)
    , DPadY(0)
    , RB(0)
    , LB(0)
    , Rtrigger(0.0)
    , Ltrigger(0.0)  {
  (void)_alloc;
    }



   typedef float _RX_axis_type;
  _RX_axis_type RX_axis;

   typedef float _RY_axis_type;
  _RY_axis_type RY_axis;

   typedef float _LX_axis_type;
  _LX_axis_type LX_axis;

   typedef float _LY_axis_type;
  _LY_axis_type LY_axis;

   typedef int8_t _a_type;
  _a_type a;

   typedef int8_t _b_type;
  _b_type b;

   typedef int8_t _x_type;
  _x_type x;

   typedef int8_t _y_type;
  _y_type y;

   typedef int8_t _DPadX_type;
  _DPadX_type DPadX;

   typedef int8_t _DPadY_type;
  _DPadY_type DPadY;

   typedef int8_t _RB_type;
  _RB_type RB;

   typedef int8_t _LB_type;
  _LB_type LB;

   typedef float _Rtrigger_type;
  _Rtrigger_type Rtrigger;

   typedef float _Ltrigger_type;
  _Ltrigger_type Ltrigger;





  typedef boost::shared_ptr< ::shared_msgs::controller_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_msgs::controller_msg_<ContainerAllocator> const> ConstPtr;

}; // struct controller_msg_

typedef ::shared_msgs::controller_msg_<std::allocator<void> > controller_msg;

typedef boost::shared_ptr< ::shared_msgs::controller_msg > controller_msgPtr;
typedef boost::shared_ptr< ::shared_msgs::controller_msg const> controller_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_msgs::controller_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_msgs::controller_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'shared_msgs': ['/home/eric/Desktop/ROV/X12-Core/surface/src/ros/src/shared_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_msgs::controller_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_msgs::controller_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_msgs::controller_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_msgs::controller_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_msgs::controller_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_msgs::controller_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_msgs::controller_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57ec734b5ac6013c2716cfd2d22db9b4";
  }

  static const char* value(const ::shared_msgs::controller_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57ec734b5ac6013cULL;
  static const uint64_t static_value2 = 0x2716cfd2d22db9b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_msgs::controller_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_msgs/controller_msg";
  }

  static const char* value(const ::shared_msgs::controller_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_msgs::controller_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 RX_axis\n\
float32 RY_axis\n\
float32 LX_axis\n\
float32 LY_axis\n\
int8 a\n\
int8 b\n\
int8 x\n\
int8 y\n\
int8 DPadX\n\
int8 DPadY\n\
int8 RB\n\
int8 LB\n\
float32 Rtrigger\n\
float32 Ltrigger\n\
";
  }

  static const char* value(const ::shared_msgs::controller_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_msgs::controller_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RX_axis);
      stream.next(m.RY_axis);
      stream.next(m.LX_axis);
      stream.next(m.LY_axis);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.DPadX);
      stream.next(m.DPadY);
      stream.next(m.RB);
      stream.next(m.LB);
      stream.next(m.Rtrigger);
      stream.next(m.Ltrigger);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controller_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_msgs::controller_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_msgs::controller_msg_<ContainerAllocator>& v)
  {
    s << indent << "RX_axis: ";
    Printer<float>::stream(s, indent + "  ", v.RX_axis);
    s << indent << "RY_axis: ";
    Printer<float>::stream(s, indent + "  ", v.RY_axis);
    s << indent << "LX_axis: ";
    Printer<float>::stream(s, indent + "  ", v.LX_axis);
    s << indent << "LY_axis: ";
    Printer<float>::stream(s, indent + "  ", v.LY_axis);
    s << indent << "a: ";
    Printer<int8_t>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<int8_t>::stream(s, indent + "  ", v.b);
    s << indent << "x: ";
    Printer<int8_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int8_t>::stream(s, indent + "  ", v.y);
    s << indent << "DPadX: ";
    Printer<int8_t>::stream(s, indent + "  ", v.DPadX);
    s << indent << "DPadY: ";
    Printer<int8_t>::stream(s, indent + "  ", v.DPadY);
    s << indent << "RB: ";
    Printer<int8_t>::stream(s, indent + "  ", v.RB);
    s << indent << "LB: ";
    Printer<int8_t>::stream(s, indent + "  ", v.LB);
    s << indent << "Rtrigger: ";
    Printer<float>::stream(s, indent + "  ", v.Rtrigger);
    s << indent << "Ltrigger: ";
    Printer<float>::stream(s, indent + "  ", v.Ltrigger);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_MSGS_MESSAGE_CONTROLLER_MSG_H
