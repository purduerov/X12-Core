// Generated by gencpp from file shared_msgs/final_thrust_msg.msg
// DO NOT EDIT!


#ifndef SHARED_MSGS_MESSAGE_FINAL_THRUST_MSG_H
#define SHARED_MSGS_MESSAGE_FINAL_THRUST_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shared_msgs
{
template <class ContainerAllocator>
struct final_thrust_msg_
{
  typedef final_thrust_msg_<ContainerAllocator> Type;

  final_thrust_msg_()
    : hfl(0)
    , hfr(0)
    , hbr(0)
    , hbl(0)
    , vfl(0)
    , vfr(0)
    , vbr(0)
    , vbl(0)  {
    }
  final_thrust_msg_(const ContainerAllocator& _alloc)
    : hfl(0)
    , hfr(0)
    , hbr(0)
    , hbl(0)
    , vfl(0)
    , vfr(0)
    , vbr(0)
    , vbl(0)  {
  (void)_alloc;
    }



   typedef uint8_t _hfl_type;
  _hfl_type hfl;

   typedef uint8_t _hfr_type;
  _hfr_type hfr;

   typedef uint8_t _hbr_type;
  _hbr_type hbr;

   typedef uint8_t _hbl_type;
  _hbl_type hbl;

   typedef uint8_t _vfl_type;
  _vfl_type vfl;

   typedef uint8_t _vfr_type;
  _vfr_type vfr;

   typedef uint8_t _vbr_type;
  _vbr_type vbr;

   typedef uint8_t _vbl_type;
  _vbl_type vbl;





  typedef boost::shared_ptr< ::shared_msgs::final_thrust_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_msgs::final_thrust_msg_<ContainerAllocator> const> ConstPtr;

}; // struct final_thrust_msg_

typedef ::shared_msgs::final_thrust_msg_<std::allocator<void> > final_thrust_msg;

typedef boost::shared_ptr< ::shared_msgs::final_thrust_msg > final_thrust_msgPtr;
typedef boost::shared_ptr< ::shared_msgs::final_thrust_msg const> final_thrust_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_msgs::final_thrust_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_msgs::final_thrust_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'shared_msgs': ['/home/eric/Desktop/ROV/X12-Core/surface/src/ros/src/shared_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_msgs::final_thrust_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_msgs::final_thrust_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_msgs::final_thrust_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_msgs::final_thrust_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_msgs::final_thrust_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_msgs::final_thrust_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_msgs::final_thrust_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ec19b411594e3b47b780fbf91db2d37";
  }

  static const char* value(const ::shared_msgs::final_thrust_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ec19b411594e3b4ULL;
  static const uint64_t static_value2 = 0x7b780fbf91db2d37ULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_msgs::final_thrust_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_msgs/final_thrust_msg";
  }

  static const char* value(const ::shared_msgs::final_thrust_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_msgs::final_thrust_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 hfl\n\
uint8 hfr\n\
uint8 hbr\n\
uint8 hbl\n\
uint8 vfl\n\
uint8 vfr\n\
uint8 vbr\n\
uint8 vbl\n\
";
  }

  static const char* value(const ::shared_msgs::final_thrust_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_msgs::final_thrust_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hfl);
      stream.next(m.hfr);
      stream.next(m.hbr);
      stream.next(m.hbl);
      stream.next(m.vfl);
      stream.next(m.vfr);
      stream.next(m.vbr);
      stream.next(m.vbl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct final_thrust_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_msgs::final_thrust_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_msgs::final_thrust_msg_<ContainerAllocator>& v)
  {
    s << indent << "hfl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hfl);
    s << indent << "hfr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hfr);
    s << indent << "hbr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hbr);
    s << indent << "hbl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hbl);
    s << indent << "vfl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vfl);
    s << indent << "vfr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vfr);
    s << indent << "vbr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vbr);
    s << indent << "vbl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vbl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_MSGS_MESSAGE_FINAL_THRUST_MSG_H
