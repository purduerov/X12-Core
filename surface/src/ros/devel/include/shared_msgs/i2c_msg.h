// Generated by gencpp from file shared_msgs/i2c_msg.msg
// DO NOT EDIT!


#ifndef SHARED_MSGS_MESSAGE_I2C_MSG_H
#define SHARED_MSGS_MESSAGE_I2C_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shared_msgs
{
template <class ContainerAllocator>
struct i2c_msg_
{
  typedef i2c_msg_<ContainerAllocator> Type;

  i2c_msg_()
    : addr(0)
    , data(0)  {
    }
  i2c_msg_(const ContainerAllocator& _alloc)
    : addr(0)
    , data(0)  {
  (void)_alloc;
    }



   typedef uint8_t _addr_type;
  _addr_type addr;

   typedef uint64_t _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::shared_msgs::i2c_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_msgs::i2c_msg_<ContainerAllocator> const> ConstPtr;

}; // struct i2c_msg_

typedef ::shared_msgs::i2c_msg_<std::allocator<void> > i2c_msg;

typedef boost::shared_ptr< ::shared_msgs::i2c_msg > i2c_msgPtr;
typedef boost::shared_ptr< ::shared_msgs::i2c_msg const> i2c_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_msgs::i2c_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_msgs::i2c_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'shared_msgs': ['/home/eric/Desktop/ROV/X12-Core/surface/src/ros/src/shared_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_msgs::i2c_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_msgs::i2c_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_msgs::i2c_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_msgs::i2c_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_msgs::i2c_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_msgs::i2c_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_msgs::i2c_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b186db14e4c5189ed032baff6e0239ff";
  }

  static const char* value(const ::shared_msgs::i2c_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb186db14e4c5189eULL;
  static const uint64_t static_value2 = 0xd032baff6e0239ffULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_msgs::i2c_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_msgs/i2c_msg";
  }

  static const char* value(const ::shared_msgs::i2c_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_msgs::i2c_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 addr\n\
uint64 data\n\
";
  }

  static const char* value(const ::shared_msgs::i2c_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_msgs::i2c_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.addr);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct i2c_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_msgs::i2c_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_msgs::i2c_msg_<ContainerAllocator>& v)
  {
    s << indent << "addr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.addr);
    s << indent << "data: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_MSGS_MESSAGE_I2C_MSG_H
